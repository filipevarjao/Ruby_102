h2. Ruby 102

This repo is answer from exercise for course that Ruby 101 <http://www.redu.com.br/espacos/961> in "Redu":http://www.redu.com.br.

Exercise 1

h3. Objective

Extend the currency-conversion example from lecture so that you can write 5.dollars.in(:euros) 10.euros.in(:rupees) etc.
You should support the currencies 'dollars', 'euros', 'rupees' , 'yen' where the conversions are: rupees to dollars, multiply by 0.019; yen to dollars, multiply by 0.013; euro to dollars, multiply by 1.292.
Both the singular and plural forms of each currency should be acceptable, e.g.  1.dollar.in(:rupees) and 10.rupees.in(:euro) should work.  You can use the code shown in lecture as a starting point if you wish; it is at http://pastebin.com/agjb5qBF 

Exercise 2

h3. Objective

Given two collections (of possibly different lengths), we want to get the Cartesian product of the sequences—in other words, every possible pair of N elements where one element is drawn from each collection.  For example, the Cartesian product of the sequences a==[:a,:b,:c] and b==[4,5] is: a×b == [[:a,4],[:a,5],[:b,4],[:b,5],[:c,4],[:c,5]] Create a method that accepts two sequences and returns an iterator that will yield the elements of the Cartesian product, one at a time, as a two-element array.

It doesn't matter what order the elements are returned in. So for the above example, the ordering [[:a,4], [:b,4], [:c,4], [:a,5], [:b,5], [:c,5]] would be correct, as would any other ordering.
It does matter that within each pair, the order of the elements matches the order in which the original sequences were provided. That is, [:a,4] is a member of the Cartesian product a×b, but [4,:a] is not. (Although [4,:a] is a member of the Cartesian product b×a.]

To start you off, here is a code skeleton and some examples showing possible correct results.
